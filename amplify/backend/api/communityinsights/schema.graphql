input CreateDiscourseInput {
	discourse_id: Int!
	content: String
	source_id: Int
	region: String
	created_time: AWSDate
	imported_time: AWSDate
	secondary_content: String
	isPost: Int
	post_id: Int
	ori_id: String
	country_code: String
	url: String
}

input CreateImpactAreaInput {
	impact_area_id: Int!
	tag: String
	source_parent_id: Int
	impact_parent_id: Int
	source_ontology: String
}

input CreateModelVersionInput {
	model_id: Int!
	model_task: String
	created_time: AWSDate
}

input CreatePlatformInput {
	platform_id: Int!
	platform_desc: String
	platform_type: String
}

input CreateRegionsInput {
	region: String!
}

input CreateSourceInput {
	source_id: Int!
	platform_id: Int
	source_desc: String
	is_survey: Int
	region: String
}

input CreateTodoInput {
	id: ID
	name: String!
	description: String
}

input CreateTrendingTopicsInput {
	topic: String!
	counts: Int
	n_gram: Int
	created_time: AWSDate
}

input DeleteTodoInput {
	id: ID
}

type Discourse {
	discourse_id: Int!
	content: String
	source_id: Int
	region: String
	created_time: AWSDate
	imported_time: AWSDate
	secondary_content: String
	isPost: Int
	post_id: Int
	ori_id: String
	country_code: String
	url: String
}

type DiscourseCount {
	count: Int
}

type DiscourseHashtags {
	counts: Int
	hashtag: String!
}

type ImpactArea {
	impact_area_id: Int!
	tag: String
	source_parent_id: Int
	impact_parent_id: Int
	source_ontology: String
}

type ImpactTree {
	impact_area_id: Int
	source_ontology: String
	tag: String
	level0: String
	level1: String
	level2: String
	color: String
}

enum ModelAttributeTypes {
	binary
	binarySet
	bool
	list
	map
	number
	numberSet
	string
	stringSet
	_null
}

input ModelBooleanInput {
	ne: Boolean
	eq: Boolean
	attributeExists: Boolean
	attributeType: ModelAttributeTypes
}

input ModelFloatInput {
	ne: Float
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
	between: [Float]
	attributeExists: Boolean
	attributeType: ModelAttributeTypes
}

input ModelIDInput {
	ne: ID
	eq: ID
	le: ID
	lt: ID
	ge: ID
	gt: ID
	contains: ID
	notContains: ID
	between: [ID]
	beginsWith: ID
	attributeExists: Boolean
	attributeType: ModelAttributeTypes
	size: ModelSizeInput
}

input ModelIntInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	between: [Int]
	attributeExists: Boolean
	attributeType: ModelAttributeTypes
}

input ModelSizeInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	between: [Int]
}

enum ModelSortDirection {
	ASC
	DESC
}

input ModelStringInput {
	ne: String
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
	contains: String
	notContains: String
	between: [String]
	beginsWith: String
	attributeExists: Boolean
	attributeType: ModelAttributeTypes
	size: ModelSizeInput
}

input ModelTodoConditionInput {
	name: ModelStringInput
	description: ModelStringInput
	and: [ModelTodoConditionInput]
	or: [ModelTodoConditionInput]
	not: ModelTodoConditionInput
}

type ModelTodoConnection {
	items: [Todo]
	nextToken: String
}

input ModelTodoFilterInput {
	id: ModelIDInput
	name: ModelStringInput
	description: ModelStringInput
	and: [ModelTodoFilterInput]
	or: [ModelTodoFilterInput]
	not: ModelTodoFilterInput
}

type ModelVersion {
	model_id: Int!
	model_task: String
	created_time: AWSDate
}

type Mutation {
	deleteDiscourse(discourse_id: Int!): Discourse
	createDiscourse(createDiscourseInput: CreateDiscourseInput!): Discourse
	updateDiscourse(updateDiscourseInput: UpdateDiscourseInput!): Discourse
	deleteImpactArea(impact_area_id: Int!): ImpactArea
	createImpactArea(createImpactAreaInput: CreateImpactAreaInput!): ImpactArea
	updateImpactArea(updateImpactAreaInput: UpdateImpactAreaInput!): ImpactArea
	deleteModelVersion(model_id: Int!): ModelVersion
	createModelVersion(createModelVersionInput: CreateModelVersionInput!): ModelVersion
	updateModelVersion(updateModelVersionInput: UpdateModelVersionInput!): ModelVersion
	deletePlatform(platform_id: Int!): Platform
	createPlatform(createPlatformInput: CreatePlatformInput!): Platform
	updatePlatform(updatePlatformInput: UpdatePlatformInput!): Platform
	deleteSource(source_id: Int!): Source
	createSource(createSourceInput: CreateSourceInput!): Source
	updateSource(updateSourceInput: UpdateSourceInput!): Source
	deleteTrendingTopics(topic: String!): TrendingTopics
	createTrendingTopics(createTrendingTopicsInput: CreateTrendingTopicsInput!): TrendingTopics
	updateTrendingTopics(updateTrendingTopicsInput: UpdateTrendingTopicsInput!): TrendingTopics
	deleteRegions(region: String!): Regions
	createRegions(createRegionsInput: CreateRegionsInput!): Regions
	updateRegions(updateRegionsInput: UpdateRegionsInput!): Regions
	createTodo(input: CreateTodoInput!, condition: ModelTodoConditionInput): Todo
	updateTodo(input: UpdateTodoInput!, condition: ModelTodoConditionInput): Todo
	deleteTodo(input: DeleteTodoInput!, condition: ModelTodoConditionInput): Todo
}

type Platform {
	platform_id: Int!
	platform_desc: String
	platform_type: String
}

type Query {
	getDiscourse(discourse_id: Int!): Discourse
	getDiscourseCount(start: String!, end: String!, region: String!): DiscourseCount
	listDiscourses: [Discourse]
	getImpactArea(impact_area_id: Int!): ImpactArea
	listImpactAreas: [ImpactArea]
	getModelVersion(model_id: Int!): ModelVersion
	listModelVersions: [ModelVersion]
	getPlatform(platform_id: Int!): Platform
	listPlatforms: [Platform]
	getSource(source_id: Int!): Source
	getTrendingTopics(topic: String!): TrendingTopics
	listTrendingTopics: [TrendingTopics]
	listTrendingTopicss: [TrendingTopics]
	listImpactTree: [ImpactTree]
	treemapMaster(
		start: String!,
		end: String!,
		region: String!,
		parent: String!
	): [treemapMaster]
	getRegions(region: String!): Regions
	listRegionss: [Regions]
	getTodo(id: ID!): Todo
	listTodos(filter: ModelTodoFilterInput, limit: Int, nextToken: String): ModelTodoConnection
	listSources: [Source]
	listDiscourseHashtags: [DiscourseHashtags]
	listTrendingHashtags(
		start: String!,
		end: String!,
		region: String!,
		parent: String!
	): [listTrendingHashtags]
	listTrendingTopicsMaster(
		start: String!,
		end: String!,
		region: String!,
		parent: String!
	): [listTrendingTopicsMaster]
	discourseTrendingTopics(
		start: String!,
		end: String!,
		region: String!,
		topic: String!,
		parent: String!
	): [discourseTrendingTopics]
	hashtagMaster(
		start: String!,
		end: String!,
		region: String!,
		topic: String!,
		parent: String!
	): [hashtagMaster]
	listDiscourseData(
		start: String!,
		end: String!,
		region: String!,
		limit: Int!,
		offset: Int!,
		parent: String,
		tag: String
	): [listDiscourseData]
        filterDiscourseData(
                start: String!,
                end: String!,
                region: String!,
                limit: Int!,
                offset: Int!,
                search: String!,
                impactarea: String!,
                source: String!,
                sentiment: String!,
                parent: String,
                tag: String
        ): [listDiscourseData]
	listDiscourseDatabySource(
		start: String!,
		end: String!,
		region: String!,
		parent: String,
		tag: String,
		source_ontology: String
	): [listDiscourseDatabySource]
	newimpactframework: [newimpactframework]
	levels(source_ontology: String): [levels]
	getTopicsComment(discourse_id: Int): [getTopicsComment]
	listImpactSPI: [listImpactSPI]
	listImpactTSF: [listImpactTSF]
	listImpactSGD: [listImpactSDG]
	location: [location]
	impactFilter(
		start: String!,
		end: String!,
		region: String!,
		parent: String
	): [impactFilter]
	getThread(post_id: Int): [listDiscourseData]
}

type Regions {
	region: String!
}

type Source {
	source_id: Int!
	platform_id: Int
	source_desc: String
	is_survey: Int
	region: String
}

type Subscription {
	onCreateDiscourse: Discourse
		@aws_subscribe(mutations: ["createDiscourse"])
	onCreateImpactArea: ImpactArea
		@aws_subscribe(mutations: ["createImpactArea"])
	onCreateModelVersion: ModelVersion
		@aws_subscribe(mutations: ["createModelVersion"])
	onCreatePlatform: Platform
		@aws_subscribe(mutations: ["createPlatform"])
	onCreateSource: Source
		@aws_subscribe(mutations: ["createSource"])
	onCreateTrendingTopics: TrendingTopics
		@aws_subscribe(mutations: ["createTrendingTopics"])
	onCreateRegions: Regions
		@aws_subscribe(mutations: ["createRegions"])
	onCreateTodo: Todo
		@aws_subscribe(mutations: ["createTodo"])
	onUpdateTodo: Todo
		@aws_subscribe(mutations: ["updateTodo"])
	onDeleteTodo: Todo
		@aws_subscribe(mutations: ["deleteTodo"])
}

type Todo {
	id: ID!
	name: String!
	description: String
}

type TrendingTopics {
	topic: String!
	counts: Int
	n_gram: Int
	created_time: AWSDate
}

input UpdateDiscourseInput {
	discourse_id: Int!
	content: String
	source_id: Int
	region: String
	created_time: AWSDate
	imported_time: AWSDate
	secondary_content: String
	isPost: Int
	post_id: Int
	ori_id: String
	country_code: String
	url: String
}

input UpdateImpactAreaInput {
	impact_area_id: Int!
	tag: String
	source_parent_id: Int
	impact_parent_id: Int
	source_ontology: String
}

input UpdateModelVersionInput {
	model_id: Int!
	model_task: String
	created_time: AWSDate
}

input UpdatePlatformInput {
	platform_id: Int!
	platform_desc: String
	platform_type: String
}

input UpdateRegionsInput {
	region: String!
}

input UpdateSourceInput {
	source_id: Int!
	platform_id: Int
	source_desc: String
	is_survey: Int
	region: String
}

input UpdateTodoInput {
	id: ID!
	name: String
	description: String
}

input UpdateTrendingTopicsInput {
	topic: String!
	counts: Int
	n_gram: Int
	created_time: AWSDate
}

type discourseTrendingTopics {
	counts: Int
	sentiment: Int
	topic: String!
	date: AWSDate
}

type getTopicsComment {
	topic: String
}

type hashtagMaster {
	counts: Int
	sentiment: Int
	topic: String!
	date: AWSDate
}

type impactFilter {
	counts: Int
	tag: String
	source_ontology: String
}

type levels {
	tag: String
}

type listDiscourseData {
	discourse_id: Int!
	url: String
	sentiment: Int
	Topics: String
	comment: String
	platform_name: String
	created_time: AWSDate
	isPost: Boolean
	post_id: Int
	region: String!
	impact_area_id: String
	type: String
}

type listDiscourseDatabySource {
	discourse_id: Int!
	sentiment: Int
	Topics: String
	comment: String
	platform_name: String
	created_time: AWSDate
	isPost: Boolean
	post_id: Int
	region: String!
	impact_area_id: String
}

type listImpactSDG {
	impact_area_id: Int
	source_ontology: String
	tag: String
	level0: String
	color: String
}

type listImpactSPI {
	impact_area_id: Int
	source_ontology: String
	tag: String
	level1: String
	level0: String
	color: String
}

type listImpactTSF {
	impact_area_id: Int
	source_ontology: String
	tag: String
	level1: String
	level0: String
	color: String
}

type listTrendingHashtags {
	counts: Int
	hashtag: String!
	sentiment: Int
	negative: Int
	neutral: Int
	positive: Int
	start_date: AWSDate
}

type listTrendingTopicsMaster {
	counts: Int
	topic: String!
	sentiment: Int
	negative: Int
	neutral: Int
	positive: Int
}

type location {
	location: String
}

type newimpactframework {
	tag: String
}

type treemapMaster {
	impact_area_id: Int
	value: Int
}
